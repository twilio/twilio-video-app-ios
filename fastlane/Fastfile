fastlane_version "2.28.3"

default_platform :ios

platform :ios do
  development_app_identifiers = ["com.twilio.video-app-internal", "com.twilio.video-app-community", "com.twilio.Video-InternalUITests"]
  enterprise_app_identifiers = "com.twilio.video-app-internal"
  project_path = "VideoApp/VideoApp.xcodeproj"

  # Had to add this when we switched to SPM but not sure why it was timing out
  ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"

  lane :test do |options|
    scan(
      project: project_path,
      scheme: options[:scheme], 
      testplan: options [:test_plan], 
      skip_slack: true
    )
  end

  lane :beta do
    tag = ENV["CIRCLE_TAG"]

    if get_version_number(xcodeproj: project_path, target: "Video-Internal") != tag
      ensure_git_status_clean
      increment_version_number(version_number: tag, xcodeproj: project_path)
      commit_version_bump(message: "Increment version number [skip ci]", xcodeproj: project_path)
      push_to_git_remote(local_branch: "HEAD", remote_branch: "master")
    end

    gym(
      scheme: "Video-Internal",
      project: project_path,
      export_options: {
        method: "enterprise",
        compileBitcode: false,
        thinning: "<none>",
      }
    ) 

    release = get_github_release(
      url: "twilio/twilio-video-app-ios", 
      version: tag,
      api_token: ENV["GITHUB_API_TOKEN"]
    )

    release = firebase_app_distribution(
      app: "1:285008367772:ios:92b7a4b16f0e25a2be5d59",
      service_credentials_file: "video-app-79418-6d9ef31a3fac.json",
      googleservice_info_plist_path: "GoogleService-Info.plist",
      ipa_path: "Video-Internal.ipa",
      release_notes: release["body"]   
    )
  end

  lane :ci_match_install do
    setup_circle_ci

    get_app_store_connect_api_key

    match(
      type: "development",
      app_identifier: development_app_identifiers,
      readonly: true,
      verbose: true,
      force_for_new_devices: false
    )

    match(
      type: "enterprise",
      app_identifier: enterprise_app_identifiers,
      readonly: true,
      verbose: true,
      force_for_new_devices: false
    )
  end

  desc "Install existing match certs and profiles without updating/overwriting"
  lane :match_install do
    get_app_store_connect_api_key

    match(
      type: "development",
      app_identifier: development_app_identifiers,
      readonly: true,
      verbose: true,
      force_for_new_devices: false
    )

    match(
      type: "enterprise",
      app_identifier: enterprise_app_identifiers,
      readonly: true,
      verbose: true,
      force_for_new_devices: false
    )
  end

  desc "Update and overwrite match certs and profiles if needed - destructive and may require other devs to match_install"
  lane :match_update do
    match(
      type: "development",
      app_identifier: development_app_identifiers,
      readonly: false,
      verbose: true,
      force_for_new_devices: true
    )

    match(
      type: "enterprise",
      app_identifier: enterprise_app_identifiers,
      readonly: false,
      verbose: true,
      force_for_new_devices: true
    )
  end

  desc "Get local api key - assumes you have downloaded the api key to the project directory"
  private_lane :get_app_store_connect_api_key do
    app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: ENV["APP_STORE_CONNECT_API_KEY_B64"],
      is_key_content_base64: true,
      in_house: false
    )
  end
end
